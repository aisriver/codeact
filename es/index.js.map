{"version":3,"sources":["index.js"],"names":["commander","colors","logMessage","execPromise","getConfig","commandConfig","defaultConfig","gitAddress","serviceFolderName","serviceStop","serviceStart","version","require","usage","option","on","white","green","parse","process","argv","args","firstCommander","cdServiceDirectory","config","result","error","red","createResult","startService","installResult","startResult","codeAct","isContinue","find","findValue","message"],"mappings":"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","sourcesContent":["#! /usr/bin/env node\nimport commander from 'commander';\nimport colors from 'colors';\nimport { logMessage, execPromise, getConfig } from './utils/process';\nimport { commandConfig } from './utils/command';\n// 配置\nconst defaultConfig = {\n    // code-act-service git地址\n    gitAddress: 'https://github.com/aisriver/code-act-service.git',\n    // 服务文件夹\n    serviceFolderName: 'code-act-service',\n    // 服务终止命令\n    serviceStop: 'npm run stop',\n    // 服务开始命令\n    serviceStart: 'npm run start',\n};\ncommander\n    .version(require('../package.json').version)\n    .usage('[options] [project name]')\n    .option('-f, --find [value]', '查看service相关配置，gitAddress（服务端git地址）、serviceFolderName（服务文件夹名称）、serviceStop（服务终止命令）、serviceStart（服务开始命令）')\n    //自定义帮助信息\n    .on('--help', () => {\n    logMessage('\\n\\nCommands：', colors.white, '');\n    logMessage('init        初始化\\n', colors.green, '');\n})\n    .parse(process.argv);\nconst [firstCommander] = commander.args;\n/**\n * 进入服务目录\n */\nconst cdServiceDirectory = async (config) => {\n    const { gitAddress, serviceFolderName } = config;\n    logMessage(`准备进入 ${serviceFolderName} 文件夹`);\n    const result = await execPromise(`cd ${serviceFolderName}`);\n    if (result.error) {\n        // 如果没有就创建一个\n        logMessage(`未发现 ${serviceFolderName} 文件夹，开始创建`, colors.red);\n        const createResult = await execPromise(`git clone ${gitAddress} ${serviceFolderName}`);\n        if (createResult.error) {\n            logMessage(`创建服务遇到些问题：${createResult.error}`, colors.red);\n            return;\n        }\n        logMessage(`创建 ${serviceFolderName} 成功!`, colors.green);\n        cdServiceDirectory(config);\n        return;\n    }\n    logMessage(`进入 ${serviceFolderName} 成功!`, colors.green);\n    startService(config);\n};\n/**\n * 启动项目\n */\nconst startService = async (config) => {\n    const { serviceFolderName, serviceStop, serviceStart } = config;\n    logMessage(`更新/安装依赖，请耐心等待...`);\n    const installResult = await execPromise(`cd ${serviceFolderName} && npm install`);\n    if (installResult.error) {\n        logMessage(`更新/安装依赖遇到些问题：${installResult.error}`, colors.red);\n        return;\n    }\n    logMessage(`依赖安装成功！`, colors.green);\n    logMessage(`开始启动...`);\n    await execPromise(`cd ${serviceFolderName} && ${serviceStop}`);\n    const startResult = await execPromise(`cd ${serviceFolderName} && ${serviceStart}`);\n    if (startResult.error) {\n        logMessage(`服务启动遇到些问题：${startResult.error}`, colors.red);\n        return;\n    }\n    logMessage(`启动成功！OPEN: http://localhost:7001`, colors.green);\n};\n/**\n * 执行\n */\nconst codeAct = async () => {\n    // 读取/写入配置文件\n    const result = await getConfig(defaultConfig);\n    if (!result.isContinue) {\n        return;\n    }\n    const config = result.config;\n    // 配置查询\n    if (commander.find) {\n        const findValue = config[commander.find];\n        if (findValue) {\n            logMessage(findValue, colors.green, '');\n        }\n        else {\n            let message = `${commander.find}不在查询范围`;\n            if (typeof commander.find === 'boolean') {\n                message = '请输入查询参数';\n            }\n            logMessage(`${message}，可查询参数（gitAddress | serviceFolderName | serviceStop | serviceStart）`, colors.red, '');\n        }\n        return;\n    }\n    // 初始化项目\n    if (firstCommander === 'init') {\n        // 初始化状态先删除对应的文件夹\n        logMessage(`初始化...`);\n        await execPromise(`${commandConfig.delete} ${config.serviceFolderName}`);\n    }\n    cdServiceDirectory(config);\n};\ncodeAct();\n"],"file":"index.js"}