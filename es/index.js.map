{"version":3,"sources":["index.js"],"names":["exec","commander","colors","version","require","usage","parse","process","argv","args","firstCommander","execPromise","command","option","Promise","resolve","childProcess","error","stdout","stderr","logMessage","message","color","white","console","log","serviceDirectoryName","cdServiceDirectory","result","red","createResult","green","startService","installResult","startResult","codeAct"],"mappings":"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","sourcesContent":["#! /usr/bin/env node\nimport { exec } from 'child_process';\nimport commander from 'commander';\nimport colors from 'colors';\ncommander\n    .version(require('../package.json').version)\n    .usage('[options] [project name]')\n    .parse(process.argv);\nconst [firstCommander] = commander.args;\n/**\n * 封装exec Promise\n * @param command\n * @param option\n */\nconst execPromise = (command, option) => new Promise((resolve) => {\n    const childProcess = exec(command, option, (error, stdout, stderr) => {\n        resolve({ error, stdout, stderr, childProcess });\n    });\n});\n/**\n * 日志打印\n * @param message\n */\nconst logMessage = (message, color = colors.white) => console.log(color(`>>>>>> ${message}`));\n// 服务文件夹\nconst serviceDirectoryName = 'code-act-service';\n/**\n * 进入服务目录\n */\nconst cdServiceDirectory = async () => {\n    logMessage(`准备进入 ${serviceDirectoryName} 文件夹`);\n    const result = await execPromise(`cd ${serviceDirectoryName}`);\n    if (result.error) {\n        // 如果没有就创建一个\n        logMessage(`未发现 ${serviceDirectoryName} 文件夹，开始创建`, colors.red);\n        // await execPromise(`mkdir ${serviceDirectoryName}`);\n        const createResult = await execPromise(`git clone https://github.com/aisriver/code-act-service.git ${serviceDirectoryName}`);\n        if (createResult.error) {\n            logMessage(`创建服务遇到些问题：${createResult.error}`, colors.red);\n            return;\n        }\n        logMessage(`创建 ${serviceDirectoryName} 成功!`, colors.green);\n        cdServiceDirectory();\n        return;\n    }\n    logMessage(`进入 ${serviceDirectoryName} 成功!`, colors.green);\n    startService();\n};\n/**\n * 启动项目\n */\nconst startService = async () => {\n    logMessage(`安装依赖，请耐心等待...`);\n    const installResult = await execPromise(`cd ${serviceDirectoryName} && npm install`);\n    if (installResult.error) {\n        logMessage(`安装依赖遇到些问题：${installResult.error}`, colors.red);\n        return;\n    }\n    logMessage(`依赖安装成功！`, colors.green);\n    logMessage(`开始启动...`);\n    await execPromise(`cd ${serviceDirectoryName} && npm run stop`);\n    const startResult = await execPromise(`cd ${serviceDirectoryName} && npm run start`);\n    if (startResult.error) {\n        logMessage(`服务启动遇到些问题：${startResult.error}`, colors.red);\n        return;\n    }\n    logMessage(`启动成功！OPEN: http://localhost:7001`, colors.green);\n};\nconst codeAct = async () => {\n    if (firstCommander === 'init') {\n        // 初始化状态先删除对应的文件夹\n        logMessage(`初始化...`);\n        await execPromise(`rm -fr ${serviceDirectoryName}`);\n    }\n    cdServiceDirectory();\n};\ncodeAct();\n"],"file":"index.js"}