{"version":3,"sources":["utils/process.js"],"names":["exec","colors","path","fs","execPromise","command","option","Promise","resolve","childProcess","error","stdout","stderr","logMessage","message","color","white","prefix","console","log","getCommandByArray","commands","join","getConfig","defaultConfig","fileName","configPath","process","cwd","config","isContinue","existsSync","eval","readFileSync","e","red","writeFileSync","result"],"mappings":"AAAA;;;;;;;;;;;;;AACA,SAASA,IAAT,QAAqB,eAArB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA;;;;;;AAKA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,OAAD,EAAUC,MAAV;AAAA,SAAqB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AACrE,QAAMC,YAAY,GAAGT,IAAI,CAACK,OAAD,EAAUC,MAAV,EAAkB,UAACI,KAAD,EAAQC,MAAR,EAAgBC,MAAhB,EAA2B;AAClEJ,MAAAA,OAAO,CAAC;AAAEE,QAAAA,KAAK,EAALA,KAAF;AAASC,QAAAA,MAAM,EAANA,MAAT;AAAiBC,QAAAA,MAAM,EAANA,MAAjB;AAAyBH,QAAAA,YAAY,EAAZA;AAAzB,OAAD,CAAP;AACH,KAFwB,CAAzB;AAGH,GAJ+C,CAArB;AAAA,CAApB;AAKP;;;;;AAIA,OAAO,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAACC,OAAD;AAAA,MAAUC,KAAV,uEAAkBd,MAAM,CAACe,KAAzB;AAAA,MAAgCC,MAAhC,uEAAyC,QAAzC;AAAA,SAAsDC,OAAO,CAACC,GAAR,CAAYJ,KAAK,WAAIE,MAAJ,cAAcH,OAAd,EAAjB,CAAtD;AAAA,CAAnB;AACP;;;;;AAIA,OAAO,IAAMM,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,QAAD;AAAA,SAAcA,QAAQ,CAACC,IAAT,CAAc,MAAd,CAAd;AAAA,CAA1B;AACP;;;;;AAIA,OAAO,IAAMC,SAAS;AAAA,sEAAG,iBAAOC,aAAP;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAyB,IAAIjB,OAAJ,CAAY,UAACC,OAAD,EAAa;AACvE,kBAAMiB,QAAQ,GAAG,mBAAjB;AACA,kBAAMC,UAAU,GAAGxB,IAAI,CAACoB,IAAL,CAAUK,OAAO,CAACC,GAAR,EAAV,EAAyBH,QAAzB,CAAnB;AACA,kBAAII,MAAM,GAAG,EAAb,CAHuE,CAIvE;;AACA,kBAAIC,UAAU,GAAG,IAAjB;;AACA,kBAAI3B,EAAE,CAAC4B,UAAH,CAAcL,UAAd,CAAJ,EAA+B;AAC3B,oBAAI;AACAG,kBAAAA,MAAM,GAAGG,IAAI,CAAC7B,EAAE,CAAC8B,YAAH,CAAgBP,UAAhB,EAA4B,OAA5B,CAAD,CAAb;AACH,iBAFD,CAGA,OAAOQ,CAAP,EAAU;AACNrB,kBAAAA,UAAU,uBAAMY,QAAN,+BAAsBxB,MAAM,CAACkC,GAA7B,CAAV;AACAL,kBAAAA,UAAU,GAAG,KAAb;AACH;AACJ,eARD,MASK;AACDjB,gBAAAA,UAAU,WAAIY,QAAJ,+EAA4BxB,MAAM,CAACkC,GAAnC,CAAV;;AACA,oBAAI;AACAhC,kBAAAA,EAAE,CAACiC,aAAH,CAAiBX,QAAjB,6XAWR,OAXQ;AAYH,iBAbD,CAcA,OAAOf,KAAP,EAAc;AACVG,kBAAAA,UAAU,uBAAMY,QAAN,+BAAsBxB,MAAM,CAACkC,GAA7B,CAAV;AACAL,kBAAAA,UAAU,GAAG,KAAb;AACH;AACJ;;AACD,kBAAMO,MAAM,GAAG;AACXR,gBAAAA,MAAM,oBAAOL,aAAP,MAAyBK,MAAzB,CADK;AAEXC,gBAAAA,UAAU,EAAVA;AAFW,eAAf;AAIAtB,cAAAA,OAAO,CAAC6B,MAAD,CAAP;AACH,aAzCiD,CAAzB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATd,SAAS;AAAA;AAAA;AAAA,GAAf","sourcesContent":["#! /usr/bin/env nod\nimport { exec } from 'child_process';\nimport colors from 'colors';\nimport path from 'path';\nimport fs from 'fs';\n/**\n * 封装exec Promise\n * @param command\n * @param option\n */\nexport const execPromise = (command, option) => new Promise((resolve) => {\n    const childProcess = exec(command, option, (error, stdout, stderr) => {\n        resolve({ error, stdout, stderr, childProcess });\n    });\n});\n/**\n * 日志打印\n * @param message\n */\nexport const logMessage = (message, color = colors.white, prefix = '>>>>>>') => console.log(color(`${prefix} ${message}`));\n/**\n * 从多个命令的数组得到命令\n * @param commands\n */\nexport const getCommandByArray = (commands) => commands.join(' && ');\n/**\n * 从项目根目录读取配置文件\n * @param defaultConfig\n */\nexport const getConfig = async (defaultConfig) => new Promise((resolve) => {\n    const fileName = 'codeact.config.js';\n    const configPath = path.join(process.cwd(), fileName);\n    let config = {};\n    // 是否继续后续操作\n    let isContinue = true;\n    if (fs.existsSync(configPath)) {\n        try {\n            config = eval(fs.readFileSync(configPath, 'utf-8'));\n        }\n        catch (e) {\n            logMessage(`读取${fileName}文件失败`, colors.red);\n            isContinue = false;\n        }\n    }\n    else {\n        logMessage(`${fileName}文件不存在，开始重新创建`, colors.red);\n        try {\n            fs.writeFileSync(fileName, `'use strict';\n\nmodule.exports = {\n  // code-act-service git地址\n  gitAddress: 'https://github.com/aisriver/code-act-service.git',\n  // 服务文件夹\n  serviceFolderName: 'code-act-service',\n  // 服务终止命令\n  serviceStop: 'npm run stop',\n  // 服务开始命令\n  serviceStart: 'npm run start',\n}`, 'utf-8');\n        }\n        catch (error) {\n            logMessage(`创建${fileName}文件失败`, colors.red);\n            isContinue = false;\n        }\n    }\n    const result = {\n        config: { ...defaultConfig, ...config },\n        isContinue,\n    };\n    resolve(result);\n});\n"],"file":"process.js"}